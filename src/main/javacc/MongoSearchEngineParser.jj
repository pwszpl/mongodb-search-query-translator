options {
    STATIC = false ;
    JDK_VERSION = "1.8";
    TOKEN_FACTORY = "mongo.search.transform.TokenFactory";
    IGNORE_CASE = true;
}

PARSER_BEGIN(MongoSearchEngineParser)
    package mongo.parser;

    import java.util.ArrayList;
    import mongo.search.transform.CriteriaTransformer;
    import mongo.search.util.StringUtil;
    import mongo.search.transform.TransformObject;
    import java.util.List;
    import java.util.function.Function;
    import mongo.search.transform.CriteriaTransformer;
    import mongo.search.transform.FiltersTransformer;

    public class MongoSearchEngineParser {
        private Function transformer = new FiltersTransformer();

        public void setCriteraMode(){
            this.transformer = new CriteriaTransformer();
        }

        public void setBSONMode(){
            this.transformer = new FiltersTransformer();
        }
    }
PARSER_END(MongoSearchEngineParser)

SKIP : {" " | "\n" | "\r" | "\r\n" }

TOKEN : { < IN : "IN" >}
TOKEN : { < NIN : "NIN" >}
TOKEN : { < LIKE : "LIKE" >}
TOKEN : { < EXISTS_FUNCTION: "EXISTS" >}
TOKEN : { < TYPE_FUNCTION: "TYPE" >}
TOKEN : { < SIZE_FUNCTION: "SIZE" >}
TOKEN : { < MOD_FUNCTION: "MOD" >}
TOKEN : { < L_PAR : "(" >}
TOKEN : { < R_PAR : ")" >}
TOKEN : { < AND : "&&" | "AND" > }
TOKEN : { < OR : "||" | "OR" >}
TOKEN : { < NOR : "NOR" >}
TOKEN : { < NOT : "NOT" | "!">}
TOKEN : { < EQ : "=" >}
TOKEN : { < NE : "<>" | "!=" | "^=" >}
TOKEN : { < GT : ">" >}
TOKEN : { < LT : "<" >}
TOKEN : { < LE : "<=" >}
TOKEN : { < GE : ">=" >}
TOKEN : { < BOOLEAN: "TRUE" | "FALSE" >}
TOKEN : { < COMMA: "," >}
TOKEN : { < INT_NUMBER : <DIGITS> >}
TOKEN : { < R_NUMBER : ("-")?<NUMBER> >}
TOKEN : { < #NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | "." <DIGITS> >}
TOKEN : { < OBJ_FIELD : (["A"-"Z","a"-"z","0"-"9","."])+ > }
TOKEN : {  < STRING_LITERAL : "'"  (~["\n","\r","'"])*  "'"> }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }


Object parse():
{
    Object result;
}
{
    result = NorExpression()
    <EOF>
    {return result;}
}

Object NorExpression():
{
     Object value = null;
     Object result;
     Token operator = null;
}
{
    value = OrExpression()
    {result = value;}
    (
        operator=<NOR>
        value = OrExpression()
        {
            result = applyTransfromFunction(operator,result,value);
        }
    )*
    {return result;}
}


Object OrExpression():
{
    Object value;
    Object result;
    Token operator = null;
}
{
    value = AndExpression()
    {result = value;}
    (
        operator=<OR>
        value = AndExpression()
        {
            result = applyTransfromFunction(operator,result,value);
        }
    )*
    {return result;}
}

Object AndExpression():
{
    Object value;
    Object result;
    Token operator = null;
}
{
    value = LogicalExpression()
    {result = value;}
    (
        operator=<AND>
        value = LogicalExpression()
        {
            result = applyTransfromFunction(operator,result,value);
        }
    )*
    {return result;}
}

Object LogicalExpression():
{
    Object value;
    Token notOperator;
}
{
    <L_PAR> value = OrExpression() <R_PAR>
    {return value;}
|
    value = OperatorExpression(null)
    {return value;}
|
    notOperator=<NOT> <L_PAR> value=OperatorExpression(notOperator) <R_PAR>
    {return value;}
}

Object OperatorExpression(Token notOperator):
{
    Object value;
    Token operator = null;
}
{
    value = FieldComparision()
    {return value;}
|
    value = OneArgumentFunction(notOperator)
    {return value;}

}

Object OneArgumentFunction(Token notOperator):
{
    Token operator;
    Token field;
    Token functionOperator;
    Token resultValue;
}
{
    operator=<EXISTS_FUNCTION> <L_PAR> field=<OBJ_FIELD> <R_PAR> <EQ> resultValue=<BOOLEAN>
        {
            return applyTransfromFunction(operator,notOperator,field,resultValue);
        }
    |
    operator=<TYPE_FUNCTION> <L_PAR> field=<OBJ_FIELD> <R_PAR> <EQ> resultValue=<STRING_LITERAL>
        {
            return applyTransfromFunction(operator,notOperator,field,resultValue);
        }
    |
    operator=<SIZE_FUNCTION> <L_PAR> field=<OBJ_FIELD> <R_PAR> <EQ> resultValue=<INT_NUMBER>
        {
            return applyTransfromFunction(operator,notOperator,field,resultValue);
        }
    |
    operator=<MOD_FUNCTION> <L_PAR> field=<OBJ_FIELD> <COMMA> functionOperator=<INT_NUMBER> <R_PAR> <EQ> resultValue=<INT_NUMBER>
        {
            return applyTransfromFunction(operator,notOperator,field,functionOperator,resultValue);
        }
}

Object FieldComparision():
{
    Token operator;
    Token objField;
    Token numValue = null;
    Token strValue = null;
    Object ret = null;
}
{
    objField=<OBJ_FIELD> ret=evaluatFieldOperator(objField)
    {
        return ret;
    }
}

Object evaluatFieldOperator(Token field):
{
    Token operator;
    Token value = null;
    List<Object> inList = new ArrayList();
}
{
    (operator=<IN> | operator=<NIN> ) <L_PAR>
        (
       value=<INT_NUMBER>
       { inList.add(value); }
       |
       value=<R_NUMBER>
       { inList.add(value); }
       |
       value= <STRING_LITERAL>
       { inList.add(value); }
       )* <R_PAR>
    {
        return applyTransfromFunction(operator,field,inList);
    }
    |
    (operator=<GE> | operator=<LE> | operator=<EQ> | operator=<NE> | operator=<GT> | operator=<LT>) (value=<INT_NUMBER> | value=<R_NUMBER> | value= <STRING_LITERAL> )
        {
            return applyTransfromFunction(operator,field,value);
        }
    |
    operator=<LIKE> value=<STRING_LITERAL>
        {
            return applyTransfromFunction(operator,field,value);
        }
}

Object applyTransfromFunction(Token operator, Object... objects):
{
}
{
    {
      TransformObject object = new TransformObject(operator,objects);
      return transformer.apply(object);
    }
}